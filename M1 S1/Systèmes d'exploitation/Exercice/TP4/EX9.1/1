#include <stdio.h>
#include <signal.h>
#include <stdlib.h>
#include <unistd.h>

sig_atomic_t counter = 0;

void f(int sig) {
    counter++;
    printf("Signal reçu : %d fois\n", counter);
    if (counter >= 5) {
        exit(0);
    }
}

int main() {
    struct sigaction s;
    sigset_t mask, old_mask;

    // Configure le gestionnaire de signal
    s.sa_handler = f;
    s.sa_flags = 0;
    sigemptyset(&s.sa_mask);
    if (sigaction(SIGINT, &s, NULL) == -1) {
        perror("Erreur lors de l'installation du gestionnaire de signal");
        return 1;
    }

    // Bloque tous les signaux sauf SIGINT
    sigemptyset(&mask);
    sigaddset(&mask, SIGINT);
    if (sigprocmask(SIG_BLOCK, &mask, &old_mask) == -1) {
        perror("Erreur lors du blocage des signaux");
        return 1;
    }

    while (1) {
        // Attente de signaux avec sigsuspend
        sigsuspend(&old_mask);
        // La boucle reprend uniquement après réception d'un signal
    }

    return 0;
}
